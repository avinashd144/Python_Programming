{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Sol_function","provenance":[],"authorship_tag":"ABX9TyOS4qBeJSi1/kcMrjwOyjjq"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"W846n63_hLPP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590404943908,"user_tz":-330,"elapsed":1058,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"914db540-8495-4862-fb10-5b67ba753ce9"},"source":["# Define a function calls addNumber(x, y) that takes in two number and returns the sum of the two numbers.\n","def addNumber(x, y): \n","\treturn x+y\n","addNumber(2, 4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"y1oUEicChk3h","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590405007900,"user_tz":-330,"elapsed":1049,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"fb7501c4-d208-4c69-8f50-87a2c43db69d"},"source":["# Define a function calls subtractNumber(x, y) that takes in two numbers and returns the difference of the two numbers.\n","def subtractNumber(x, y): \n","\treturn x-y\n","subtractNumber(20, 7)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["13"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"90043xO_hoXP","colab_type":"code","colab":{}},"source":["# Write a function getBiggerNumber(x, y) that takes in two numbers as arguments and returns the bigger number.\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LEuXK08HhlCN","colab_type":"code","colab":{}},"source":["# Python provides many built-in modules with many useful functions. \n","# One such module is the math module. The math module provides many useful functions such as sqrt(x), pow(x, y), ceil(x), floor(x) etc. \n","# You will need to do a \"import math\" before you are allowed to use the functions within the math module.\n","\n","import math\n","# Calculate the square root of 16 and stores it in the variable a\n","a = math.sqrt(16)\n","\n","# Calculate 3 to the power of 5 and stores it in the variable b\n","b = math.pow(3,5)\n","\n","# Calculate area of circle with radius = 3.0 by making use of the math.pi constant and store it in the variable c\n","c = math.pi * 2 * 3.0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bG78rHm2hlJr","colab_type":"code","colab":{}},"source":["# Write a function to convert temperature from Celsius to Fahrenheit scale.\n","# oC to oF Conversion: Multipy by 9, then divide by 5, then add 32.\n","\n","# Note: Return a string of 2 decimal places.\n","# In - Cel2Fah(28.0)\n","# Out - '82.40'\n","# In - Cel2Fah(0.00)\n","# Out - '32.00'\n","\n","# Note: Return a string of 2 decimal places.\n","def Cel2Fah(temp): \n","\tout_temp = ((temp*9)/5)+32\n","\treturn '{:.2f}'.format(out_temp)\n","Cel2Fah(28.0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zQ05727jhlNX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590407442456,"user_tz":-330,"elapsed":1096,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"716b0cf6-e215-43bc-a93d-47d800a970b0"},"source":["# Write a function to compute the BMI of a person.\n","#     BMI = weight(kg)  /  ( height(m)*height(m) )\n","\n","# Note: Return a string of 1 decimal place.\n","# In - BMI(63, 1.7)\n","# Out - '21.8'\n","# In - BMI(110, 2)\n","# Out - '27.5'\n","\n","def BMI(weight, height): \n","\tout_ind = weight / (height*height)\n","\treturn '{:.1f}'.format(out_ind)\n","BMI(110, 2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'27.5'"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"u7tqOfLrhlRJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590407613984,"user_tz":-330,"elapsed":1292,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"99570670-a1ea-488e-bc1f-90b989f09a75"},"source":["# Write a function percent(value, total) that takes in two numbers as arguments, and returns the percentage value as an integer.\n","# In - percent(46, 90)\n","# Out - 51\n","# In - percent(51, 51)\n","# Out - 100\n","# In - percent(63, 12)\n","# Out - 525\n","\n","def percent(val, total):\n","\treturn int((val*100)/total)\n","\t\n","percent(46, 90)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["51"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"w9SJ00dNhlUh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590427768908,"user_tz":-330,"elapsed":2255,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"565eebcc-3e7d-47cf-a7c7-13a58c42c729"},"source":["# Write a function to compute the hypotenuse given sides a and b of the triangle.\n","# Hint: You can use math.sqrt(x) to compute the square root of x.\n","# In - hypotenuse(3, 4)\n","# Out - 5\n","# In - hypotenuse(5, 12)\n","# Out - 13\n","\n","import math\n","def hypotenuse(a, b): \n","  return math.sqrt(pow(a,2)+pow(b,2))\n","hypotenuse(3, 4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"wBU4fBqR4es1","colab_type":"code","colab":{}},"source":["# Write a function getSumOfLastDigits() that takes in a list of positive numbers and returns the sum of all the last digits in the list.\n","# getSumOfLastDigits([2, 3, 4])\n","# 9\n","# getSumOfLastDigits([1, 23, 456])\n","# 10\n","def getSumOfLastDigits(numList): \n","\ttotal = 0\n","\tfor num in numList:\n","\t\ttotal = total + int(str(num)[-1])\n","\treturn total\n","getSumOfLastDigits([2, 3, 4])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aggMb-YL4e01","colab_type":"code","colab":{}},"source":["# Write a function that uses a default value.\n","# In - introduce('Lim', 20)\n","# Out - 'My name is Lim. I am 20 years old.'\n","# In - introduce('Ahmad')\n","# Out - 'My name is Ahmad. My age is secret.'\n","\n","def introduce(name, age=0):\n","    msg = \"My name is %s. \" % name\n","    if age == 0:\n","       msg += \"My age is secret.\"\n","    else:\n","       msg += \"I am {} years old.\".format(age)\n","    return msg \n","introduce('Lim', 20)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1LTu-wlF4e4Q","colab_type":"code","colab":{}},"source":["# Write a function isEquilateral(x, y, z) that accepts the 3 sides of a triangle as arguments. \n","# The program should return True if it is an equilateral triangle.\n","\n","# In - isEquilateral(2, 4, 3)\n","# False - False\n","# In - isEquilateral(3, 3, 3)\n","# Out - True\n","# In - isEquilateral(-3, -3, -3)\n","# Out - False\n","\n","def isEquilateral(x, y, z): \n","\tif x>0 and y>0 and z>0:\n","\t\treturn True if x==y==z else False\n","\telse:\n","\t\treturn False\n","isEquilateral(2, 4, 3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zHPpeINx4e-t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590429719097,"user_tz":-330,"elapsed":1267,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"64294ae0-75fa-423a-ed2f-e1680185bac7"},"source":["# For a quadratic equation in the form of ax2+bx+c, the discriminant, D is b2-4ac. Write a function to compute the discriminant, D.\n","# In - quadratic(1, 2, 3)\n","# Out - 'The discriminant is -8.'\n","# In - quadratic(1, 3, 2)\n","# Out - 'The discriminant is 1.'\n","# In - quadratic(1, 4, 4)\n","# Out - 'The discriminant is 0.'\n","\n","def quadratic(a, b, c): \n","\treturn \"The discriminant is {}.\".format((b*b) - (4*a*c))\n","quadratic(1, 2, 3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-8"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"zOB5JveI4fCH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1590430059970,"user_tz":-330,"elapsed":1436,"user":{"displayName":"Abhishek Gupta","photoUrl":"","userId":"01308143559053085164"}},"outputId":"3fed47d3-bdf4-48e3-85ba-cdbee8ca7d5d"},"source":["# Define a function calls addFirstAndLast(x) that takes in a list of numbers and returns the sum of the first and last numbers.\n","# In - addFirstAndLast([])\n","# Out - 0\n","# In - addFirstAndLast([2, 7, 3])\n","# Out - 5\n","# In - addFirstAndLast([10])\n","# Out - 10\n","\n","def addFirstAndLast(x): \n","\tif not x:\n","\t\treturn 0\n","\telif len(x) == 1:\n","\t\treturn x[0]\n","\telse:\n","\t\treturn x[0]+x[-1]\n","addFirstAndLast([])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"24sED7Te4fF4","colab_type":"code","colab":{}},"source":["# Complete the 'lambda' expression so that it returns True if the argument is an even number, and False otherwise.\n","even = lambda x: True if x%2 == 0 else False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZGi-WmIH4fI4","colab_type":"code","colab":{}},"source":["# getScore.__doc__\n","# 'A function that computes and returns the final score.'\n","\n","def getScore(data):\n","\t'''A function that computes and returns the final score.'''\n","\treturn score "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_TyZkfM-4fNe","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}