# -*- coding: utf-8 -*-
"""Week 5 Exercise: Pandas Joining, merging DataFrame and Plotting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LKIDbWHNolTzFSp1ObN5PHbP1T0KyvO3

Write a Pandas program to append a list of dictioneries or series to an
existing DataFrame and display the combined data.

Student_detail:

student_id name marks

0 S1 Danniella Fenton 200

1 S2 Ryder Storey 210

2 S3 Bryce Jensen 190

3 S4 Ed Bernal 222

4 S5 Kwame Morin 199

Dictionary:

student_id S6

name Scarlette Fisher

marks 205
"""

import pandas as pd

student_data1 = {
    "student_id": ["S1", "S2", "S3", "S4", "S5"],
    "name": ["Danniella Fenton", "Ryder Storey", "Bryce Jensen", "Ed Bernal", "Kwame Morin"],
    "marks": [200, 210, 190, 222, 199]
}
student_data1 = pd.DataFrame(student_data1)
print(student_data1)

df2 = {
    "student_id": ["S6"],
    "name": ["Scarlette Fisher"],
    "marks": [205]
}
df2 = pd.DataFrame(df2)
print('\n', df2)
student_data1 = pd.concat([student_data1, df2], ignore_index=True)
print('\n', student_data1)

"""2. Write a Pandas program to join the two given dataframes a long rows
and merge with another dataframe along the common column id.
"""

import pandas as pd

student_data1 = {
    "student_id": ["S1", "S2", "S3", "S4", "S5"],
    "name": ["Danniella Fenton", "Ryder Storey", "Bryce Jensen", "Ed Bernal", "Kwame Morin"],
    "marks": [200, 210, 190, 222, 199]
}
student_data1 = pd.DataFrame(student_data1)
print(f'student_data1: {student_data1}')

student_data2 = pd.DataFrame({
    "student_id": ["S4", "S5", "S6", "S7", "S8"],
    "name": ["Scarlette Fisher", "Carla Williamson", "Dante Morse", "Kaiser William", "Madeeha Preston"],
    "marks": [201, 200, 198, 219, 201]
})

exam_data = pd.DataFrame({
    "student_id": ["S1", "S2", "S3", "S4", "S5", "S7", "S8", "S9", "S10", "S11", "S12", "S13"],
    "exam_id": [23, 45, 12, 67, 21, 55, 33, 14, 56, 83, 88, 12]
})

total_student_data = pd.concat([student_data1, student_data2], ignore_index=True)
print(f'total_student_data: {total_student_data}')
merged_data = pd.merge(total_student_data, exam_data, on="student_id", how="inner")

print("Combined and Merged DataFrame:")
print(merged_data)

"""3. Write a Pandas program to join the two dataframes using the common
column of both dataframes.
"""

import pandas as pd

student_data1 = {
    "student_id": ["S1", "S2", "S3", "S4", "S5"],
    "name": ["Danniella Fenton", "Ryder Storey", "Bryce Jensen", "Ed Bernal", "Kwame Morin"],
    "marks": [200, 210, 190, 222, 199]
}
student_data1 = pd.DataFrame(student_data1)
print(f'student_data1: {student_data1}')

student_data2 = pd.DataFrame({
    "student_id": ["S4", "S5", "S6", "S7", "S8"],
    "name": ["Scarlette Fisher", "Carla Williamson", "Dante Morse", "Kaiser William", "Madeeha Preston"],
    "marks": [201, 200, 198, 219, 201]
})
print(f'student_data2: {student_data2}')

merged_df = pd.merge(student_data1, student_data2, on="marks")
merged_df2 = pd.merge(student_data1, student_data2, on="student_id")

print("Merged DataFrame on common column 'marks':")
print(merged_df)
print("Merged DataFrame on common column 'student_id':")
print(merged_df2)

"""4. Write a Pandas program to join the two dataframes with matching
records from both sides where available.
"""

import pandas as pd

student_data1 = {
    "student_id": ["S1", "S2", "S3", "S4", "S5"],
    "name": ["Danniella Fenton", "Ryder Storey", "Bryce Jensen", "Ed Bernal", "Kwame Morin"],
    "marks": [200, 210, 190, 222, 199]
}
student_data1 = pd.DataFrame(student_data1)
print(f'student_data1: {student_data1}')

student_data2 = pd.DataFrame({
    "student_id": ["S4", "S5", "S6", "S7", "S8"],
    "name": ["Scarlette Fisher", "Carla Williamson", "Dante Morse", "Kaiser William", "Madeeha Preston"],
    "marks": [201, 200, 198, 219, 201]
})
print(f'student_data2: {student_data2}')

merged_df = pd.merge(student_data1, student_data2, on="marks", how="outer")
merged_df2 = pd.merge(student_data1, student_data2, on="student_id", how="outer")

print("Merged DataFrame on common column 'marks':")
print(merged_df)
print("Merged DataFrame on common column 'student_id':")
print(merged_df2)

"""5. Write a Pandas program to join (left join) the two dataframes using keys
from left dataframe only
"""

import pandas as pd

student_data1 = {
    "student_id": ["S1", "S2", "S3", "S4", "S5"],
    "name": ["Danniella Fenton", "Ryder Storey", "Bryce Jensen", "Ed Bernal", "Kwame Morin"],
    "marks": [200, 210, 190, 222, 199]
}
student_data1 = pd.DataFrame(student_data1)
print(f'student_data1: {student_data1}')

student_data2 = pd.DataFrame({
    "student_id": ["S4", "S5", "S6", "S7", "S8"],
    "name": ["Scarlette Fisher", "Carla Williamson", "Dante Morse", "Kaiser William", "Madeeha Preston"],
    "marks": [201, 200, 198, 219, 201]
})
print(f'student_data2: {student_data2}')

merged_df = pd.merge(student_data1, student_data2, on="marks", how="left")
merged_df2 = pd.merge(student_data1, student_data2, on="student_id", how="left")

print("Merged DataFrame on common column 'marks':")
print(merged_df)
print("Merged DataFrame on common column 'student_id':")
print(merged_df2)

"""# Using the Alphabet Dataset Provided on Moodle
6. Write a Pandas program to create a line plot of the historical stock prices of
Alphabet Inc. between two specific dates.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/alphabet_stock_data.csv')

# Convert the 'Date' column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

print(data.head())
start_date = '2020-04-21'
end_date = '2020-06-30'

filtered_data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]

plt.figure(figsize=(8, 6))
plt.plot(filtered_data['Date'], filtered_data['High'], color='blue', label='High Price')

plt.xlabel('Date')
plt.ylabel('Stock Price (High)')
plt.title('Alphabet Inc. Stock Prices from {} to {}'.format(start_date, end_date))
plt.legend()
plt.grid()

plt.show()

"""7. Write a Pandas program to create a line plot of the opening, closing stock prices
of Alphabet Inc. between two specific dates.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/alphabet_stock_data.csv')

# Convert the 'Date' column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

print(data.head())
start_date = '2020-04-21'
end_date = '2020-06-30'

filtered_data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]

plt.figure(figsize=(8, 6))
plt.plot(filtered_data['Date'], filtered_data['Open'], color='blue', label='Open Price')
plt.plot(filtered_data['Date'], filtered_data['Close'], color='red', label='Close Price')

plt.xlabel('Date')
plt.ylabel('Stock Price ')
plt.title('Alphabet Inc. Stock Prices from {} to {}'.format(start_date, end_date))
plt.legend()
plt.grid()

plt.show()

"""8. Write a Pandas program to create a bar plot of the trading volume of Alphabet
Inc. stock between two specific dates.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/alphabet_stock_data.csv')

# Convert the 'Date' column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

print(data.head())
start_date = '2020-04-21'
end_date = '2020-06-30'

filtered_data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]

plt.figure(figsize=(8, 6))
plt.bar(filtered_data['Date'], filtered_data['Volume'], color='red', label='Volume')

plt.xlabel('Date')
plt.ylabel('Volume ')
plt.title('Alphabet Inc. Volume from {} to {}'.format(start_date, end_date))
plt.legend()
plt.xticks(rotation=45)  # Rotate x labels for better readability
plt.grid(axis='y')

plt.show()

"""9. Write a Pandas program to create a bar plot of opening, closing stock prices of
Alphabet Inc. between two specific dates.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/alphabet_stock_data.csv')

# Convert the 'Date' column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

print(data.head())
start_date = '2020-04-21'
end_date = '2020-06-30'

filtered_data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]

bar_width = 0.4
plt.figure(figsize=(12, 6))

plt.bar(filtered_data['Date'] - pd.Timedelta(days=bar_width/2), filtered_data['Open'],
        width=bar_width, color='blue', label='Open Price')

plt.bar(filtered_data['Date'] + pd.Timedelta(days=bar_width/2), filtered_data['Close'],
        width=bar_width, color='red', label='Close Price')

plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title(f'Alphabet Inc. Stock Prices from {start_date} to {end_date}')
plt.legend()
plt.xticks(rotation=45)
plt.grid(axis='y')

plt.show()

"""10.Write a Pandas program to create a stacked bar plot of opening, closing stock
prices of Alphabet Inc. between two specific dates.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/alphabet_stock_data.csv')
data['Date'] = pd.to_datetime(data['Date'])

start_date = '2020-04-21'
end_date = '2020-06-30'

filtered_data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]
plt.figure(figsize=(12, 6))
plt.bar(filtered_data['Date'], filtered_data['Open'], color='blue', label='Open Price')
plt.bar(filtered_data['Date'], filtered_data['Close'], bottom=filtered_data['Open'], color='red', label='Close Price')

plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title(f'Alphabet Inc. Stacked Opening and Closing Stock Prices from {start_date} to {end_date}')
plt.legend()
plt.xticks(rotation=45)
plt.grid(axis='y')


plt.show()